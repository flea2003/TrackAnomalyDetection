plugins {
    id 'java'
    id 'checkstyle'
    id 'info.solidsoft.pitest' version '1.15.0'
    id 'jacoco'
    id 'pmd'
    id 'net.razvan.jacoco-to-cobertura' version '1.2.0'
    id 'application'
}

apply plugin : "java"

ext {
    javaMainClass = "simulator.Main"
}

application {
    mainClassName = javaMainClass
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.assertj:assertj-core:3.21.0'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation 'org.apache.kafka:kafka-clients:3.7.0'
    testImplementation 'org.mockito:mockito-core:4.0.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.0'
    implementation 'org.projectlombok:lombok:1.18.28'
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
}

checkstyle {
    sourceSets = [sourceSets.main]
    toolVersion = '10.16.0'
    config = resources.text.fromFile('../config/checkstyle.xml')
    showViolations = true
    ignoreFailures = false // makes the build fail on violations
}

test {
    useJUnitPlatform()
}

pitest {
    //adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
    // check https://github.com/pitest/pitest-junit5-plugin?tab=readme-ov-file#gradle
    junit5PluginVersion = '1.2.1'

    targetClasses = ['helperObjects.*', 'parsers.*']
    threads = 4
    timestampedReports = false
    outputFormats = ['XML', 'HTML']
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test // Ensures that the test task completes before generating the report.
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "simulator/Main.class"
            ])
        }))
    }
    reports {
        xml.required = true
        html.required = true
    }

    finalizedBy(jacocoToCobertura)
}

pmd {
    sourceSets = [sourceSets.main]
    ruleSets = []
    ruleSetFiles = files('../config/pmd.xml')
    incrementalAnalysis = true
    ignoreFailures = false
    consoleOutput = true
    threads = 4
}

