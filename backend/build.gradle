buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		//Needed only for SNAPSHOT versions
		//maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	}
}


plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'checkstyle'
	id 'pmd'
	id 'jacoco'
	id 'info.solidsoft.pitest' version '1.15.0'
	id 'net.razvan.jacoco-to-cobertura' version '1.2.0'

	// For Flink
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

ext {
	flinkVersion = '1.19.0'
	kafkaVersion = '3.7.0'
	scalaBinaryVersion = '_2.12'
	slf4jVersion = '1.7.36'
	log4jVersion = '2.17.1'
	jacksonVersion = '2.15.0'

	// these jvmArgs are needed by Flink code
	additionalJvmArgs = [
			'--add-opens=java.base/java.util=ALL-UNNAMED',
			'--add-opens=java.base/java.lang=ALL-UNNAMED',
			'--add-opens=java.base/java.time=ALL-UNNAMED'
	]
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

group = 'dev.system'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

bootRun{
	jvmArgs = additionalJvmArgs
}

test {
	jvmArgs += additionalJvmArgs
}

checkstyle {
	sourceSets = [sourceSets.main]
	toolVersion = '10.16.0'
	config = resources.text.fromFile('../config/checkstyle.xml')
	showViolations = true
	ignoreFailures = false // makes the build fail on violations
}

repositories {
	mavenCentral()
}

// For Flink
configurations {
	flinkShadowJar
	flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
	flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
	flinkShadowJar.exclude group: 'org.slf4j'
	flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}

dependencies {
	testImplementation group: 'org.apache.kafka', name: 'kafka-streams-test-utils', version: "${kafkaVersion}"

	implementation 'io.r2dbc:r2dbc-spi:0.9.0.RELEASE' // Check for the latest version
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.apache.kafka:kafka-streams:${kafkaVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'
	implementation 'org.projectlombok:lombok:1.18.28'
	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	testCompileOnly 'org.projectlombok:lombok:1.18.32'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

	// For Flink:
	implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
	implementation "org.apache.flink:flink-clients:${flinkVersion}"
	implementation 'org.projectlombok:lombok:1.18.28'
	flinkShadowJar "org.apache.flink:flink-connector-kafka:3.0.1-1.18"
	runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
	runtimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
	runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
	implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
	implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
	implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
	implementation 'org.projectlombok:lombok:1.18.28'
	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	testCompileOnly 'org.projectlombok:lombok:1.18.32'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

	// Flink test utils
	testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"
	testCompileOnly "org.apache.flink:flink-test-utils:${flinkVersion}"

	// For kafka client:
	implementation group: 'org.apache.flink', name: 'flink-core', version: "${flinkVersion}"
	implementation group: 'org.apache.flink', name: 'flink-queryable-state-client-java', version: "${flinkVersion}"
	implementation "org.apache.flink:flink-queryable-state-runtime:${flinkVersion}"
	implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.7.0'
	implementation group: 'com.giladam', name: 'kafka-jackson-serde', version: '1.0.0'

	// For JPA:
	implementation group: 'org.apache.calcite.avatica', name: 'avatica-core', version: '1.25.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'

	testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"
	testImplementation "org.apache.flink:flink-runtime:${flinkVersion}:tests"

	testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.12.0'
	testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'

	// Some JSON Utils
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'
}

// For Flink
sourceSets {
	main.compileClasspath += configurations.flinkShadowJar
	main.runtimeClasspath += configurations.flinkShadowJar
	test.compileClasspath += configurations.flinkShadowJar
	test.runtimeClasspath += configurations.flinkShadowJar
	javadoc.classpath += configurations.flinkShadowJar
}
//run.classpath = sourceSets.main.runtimeClasspath

jar {
	manifest {
		attributes 'Built-By': System.getProperty('user.name'),
				'Build-Jdk': System.getProperty('java.version')
	}
}

shadowJar {
	configurations = [project.configurations.flinkShadowJar]
}

test {
	useJUnitPlatform()

	// modify jvmArgs (needed by Flink tests)
	jvmArgs += [
			'--add-opens=java.base/java.util=ALL-UNNAMED',
			'--add-opens=java.base/java.lang=ALL-UNNAMED',
			'--add-opens=java.base/java.time=ALL-UNNAMED'
	]
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test // Ensures that the test task completes before generating the report.

	reports {
		xml.required = true
		html.required = true
	}

	finalizedBy(jacocoToCobertura)
}

pitest {
	// adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
	// check https://github.com/pitest/pitest-junit5-plugin?tab=readme-ov-file#gradle
	junit5PluginVersion = '1.2.1'

	targetClasses = ['sp.*']
	threads = 4
	timestampedReports = false
	outputFormats = ['XML', 'HTML']

	jvmArgs = additionalJvmArgs
}


pmd {
	sourceSets = [sourceSets.main]
	ruleSets = []
	ruleSetFiles = files('../config/pmd.xml')
	incrementalAnalysis = true
	ignoreFailures = false
	consoleOutput = true
	threads = 4
}
